// 변수의 종류

package com.eomcs.basic.ex04;

public class Exam0400 {
  public static void main(String[] agrs) {
    // 정수
    byte b;
    short s;
    int i;
    long l;
    
    // 부동소수점
    float f;
    double d;
    
    // 문자
    char c;
    
    // 논리
    boolean bool;
    
    // 레퍼런스
    String str;
    
    // 변수의 메모리 크기
    // 정수 리터럴은 기본이 4바이트이다.
    // 원래 작은 메모리에 저장할 수 없지만,
    // 오른쪽의 값이 4바이트 정수 리터럴일 경우(8바이트 X)
    // 메모리에 그 리터럴을 저장할 수 있다면 허락
    b = -128;
    b = 127;
/*    160000 <00001000> 0000 00000
    1000 0001 (129)
    
    1215462123
    
 1 바이트 

 8 비트

 킬로바이트(KB) 
    /32비트 
    
    //b = -129;
    //b = 128; 
    
    // 4바이트 리터럴끼리의 연산 결과는 리터럴로 취급한다.
    b = 20 + 30;
    //예외 상황
    
    b = 120 + 7;    
    1 바이트 

    8 비트

    킬로바이트(KB)
    //b = 120 + 8;
    
    byte b2 = 20;
    // b = 100 + b2;
    // 리터럴끼리의 연산은 가능하지만, 변수는 X
    
    s = -32768;
    s = 32767;
    //s = -32769;
    //s = 32768;
    
    i = -21_0000_0000;
    i = 21_0000_0000;
    // i = -22_0000_0000;
    // i = 22_0000_0000;
    
    l = -922_0000_0000_0000_0000L;
    l = 922_0000_0000_0000_0000L;
    //l = -932_0000_0000_0000_0000L;
    //l = 932_0000_0000_0000_0000L;
    
    b = 100;
    s = 100;
    i = 100;
    
    //b = 100L;
    //s = 100L;
    //i = 100L;
    
    byte b3;
    b3 = b;
    //b3 = s;
    //b3 = i;
    //b3 = l;
    
    short s2;
    s2 = b;
    s2 = s;
    //s2 = i;
    //s2 = l;
    
    int i2;
    i2 = b;
    i2 = s;
    i2 = i;
    //i2 = l;
    
    long l2;
    l2 =b;
    l2 = s;
    l2 = i;
    l2 = l;
    
    s = -32768;
    s = 32767;
    char c2;
    c2 = -32768
    c2 = 0;
    c2 = 65535;
    //c2 = 65536;
    
    // 그래픽카드의 CPU는 부동소수점 연산에 특화되어 있다
    
    //쿨럭은 시계
    //트랜지스터 연산(더하기 만들어보기)
*/    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  }

}
